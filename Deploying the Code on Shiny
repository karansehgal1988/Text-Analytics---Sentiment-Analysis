library(tm) # for text mining
library(SnowballC) # for text stemming
library(textstem) # for Lemmitization
library(wordcloud) # word-cloud generator
library(RColorBrewer) # color palettes
library(syuzhet) # for sentiment analysis
library(ggplot2) # for plotting graphs
library(officer) # For reading ppt
library(RCurl)# Web 
library(XML)  
library(dplyr)
library(stringr)
library(tidytext)
library(plyr)

# Define UI for application that draws a histogram
ui <- fluidPage(
  # Application title
  titlePanel("Iris Dataset Predictions"),
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      # Input: Select a file ----
      fileInput("file1", "upload csv file here",
                multiple = FALSE,
                accept = c("text/csv",
                           "text/comma-separated-values,text/plain",
                           ".txt")),actionButton("go", "Go"),
      # Button
      downloadButton("downloadData", "Download the Predictions")
    ),
    # Show the table with the predictions
    mainPanel(
      plotOutput("mytable")
    )
  )
)
# Define server logic required to draw a histogram
server <- function(input, output) {
  
  library(tm) # for text mining
  library(SnowballC) # for text stemming
  library(textstem) # for Lemmitization
  library(wordcloud) # word-cloud generator
  library(RColorBrewer) # color palettes
  library(syuzhet) # for sentiment analysis
  library(ggplot2) # for plotting graphs
  library(officer) # For reading ppt
  library(RCurl)# Web 
  library(XML)  
  library(dplyr)
  library(stringr)
          library(tidytext)
          library(plyr)
  
  reactiveDF<- eventReactive(input$go, {
    runif(input$file1)
    data1=read.delim(file.choose())
    data2 = Corpus(VectorSource(as.vector(data1))) 
    
    #Replacing "/", "@" and "|" with space
    toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
    text1 <- tm_map(data2, toSpace, "/")
    text1 <- tm_map(text1, toSpace, "@")
    text1 <- tm_map(text1, toSpace, "\\|")
    # Convert the text to lower case
    text1 <- tm_map(text1, content_transformer(tolower))
    # Remove numbers
    text1 <- tm_map(text1, removeNumbers)
    # Remove english common stopwords
    text1 <- tm_map(text1, removeWords, stopwords("english"))
    # Remove punctuations
    text1 <- tm_map(text1, removePunctuation)
    # Eliminate extra white spaces
    text1 <- tm_map(text1, stripWhitespace)
    
    text1 <- tm_map(text1, stemDocument)
    
    text1 = lemmatize_words(text1)
    
    
    dtm <- TermDocumentMatrix(text1)
    m<- as.matrix(dtm)
    m=as.data.frame(m)
    
    v <- sort(rowSums(m),decreasing=TRUE)
    d <- data.frame(word = names(v),freq=v)
    
    senti<-get_nrc_sentiment(d$word)
    senti = senti%>%colSums()%>%data.frame()
    senti$Sentiment = rownames(senti)
    rownames(senti)=NULL
    names(senti)[1]="Counts"
    senti=senti[,2:1]
    
    
    
    senti = senti[!senti$Sentiment=="positive",]
    senti = senti[!senti$Sentiment=="negative",]
    
    senti=senti[order(senti$Counts,decreasing = T),]
    
    senti$Percentage = (senti$Counts/sum(senti$Counts))*100
    senti$Percentage = paste0(senti$Percentage,"%") 
    
    plot1 = ggplot(data=senti, aes(x=Sentiment, y=Counts,fill=Sentiment)) +
      geom_bar(stat="identity", position=position_dodge())+
      geom_text(aes(label=Percentage), vjust=1.6, color="white",
                position = position_dodge(0.9), size=3.5)+
      scale_fill_brewer(palette="Paired")+
      theme_minimal()
    
    plot1
    
    
    return(plot1)
    
  })
  
  
  output$mytable = renderPlot({
    req(input$file1)
    return(reactiveDF())
  })
  
  
  # Downloadable csv of selected dataset ----
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("data-", Sys.Date(), ".csv", sep="")
    },
    content = function(file) {
      write.csv(reactiveDF(), file, row.names = FALSE)
    }
  )
  
}
# Run the application 
shinyApp(ui = ui, server = server)
